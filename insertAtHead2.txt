#include <stdio.h>
#include<stdlib.h>

struct node
{
  int data;
  struct node *next;
};

void print(struct node*ptr){
    printf("printing elements of linked list");
    printf("  ");
    while(ptr!=NULL){
        printf("%d",ptr->data);
        printf("->");
        ptr= ptr->next;
    }
}
 struct node * InsertAtHead(struct node* first, int data){
     struct node* temp = (struct node*) malloc (sizeof(struct node));
     temp->next = first;
     temp->data = data;
     first = temp;
     return temp;
     
 }
 struct node * InsertAtPos(struct node* first, int data,int position){
     struct node* temp = (struct node*) malloc (sizeof(struct node));
     struct node*ptr = first;
     while(position!=1){
         ptr = ptr->next;
         position--;
     }
     temp->next= ptr->next;
     ptr->next= temp;
     temp->data = data;
     
     return first;
     
     
 }
 struct node* InsertAtEnd(struct node*first, int data){
     struct node * ptr = first;
     struct node* temp = (struct node*) malloc (sizeof(struct node));
     while(ptr->next!= NULL){
         ptr= ptr->next;
     }
     ptr->next = temp;
     temp->next = NULL;
     temp->data = data;
     return first;
     
     
 }
 
int main ()
{
  struct node *first;
  struct node *second;
  struct node *third;
  struct node *fourth;

  first = (struct node *) malloc (sizeof (struct node));
  second = (struct node *) malloc (sizeof (struct node));
  third = (struct node *) malloc (sizeof (struct node));
  fourth = (struct node *) malloc (sizeof (struct node));

  first->data = 12;
  first->next = second;
  
  second->data = 13;
  second->next = third;
  
  third->data = 14;
  third->next = fourth;

 fourth->data = 15;
  fourth->next = NULL;
  print(first);
  struct node* head = (struct node*) malloc (sizeof(struct node));
   head =InsertAtHead( first,23 );
  print(head);
  head =InsertAtPos(first,56,3);
  print(head);
  head =InsertAtEnd(first,45);
  print(head);
  
  
  
   
}
